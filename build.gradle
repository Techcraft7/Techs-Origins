import java.nio.file.Files

plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

sourceSets {
	test {
		java {
			srcDirs = ["./src/test/java"]
		}
	}
}

repositories {
	maven {
		url 'https://jitpack.io'
	}
	maven {
		name = "AdrianTodt's Maven"
		url = "https://dl.bintray.com/adriantodt/maven"
	}
	maven {
		url "https://maven.jamieswhiteshirt.com/libs-release/"
	}
}

dependencies {
    implementation 'org.junit.jupiter:junit-jupiter:5.4.2'

    // To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "com.github.apace100:origins-fabric:${project.origins_version}"
}

processResources {
	inputs.property "version", project.version
	filesMatching("**/*.*") {
		def type = Files.probeContentType(new File(path).toPath())
		if (type != null) {
			boolean isBinary = true
			for (String s : ["json"]) {
				if (type.contains(s)) {
					isBinary = false
					break
				}
			}
			if (isBinary) {
				println "Skipping binary file: " + path
			} else {
				println "Processing file: " + it.getPath()
				expand "version": project.version
				expand "modid": "techs_origins"
			}
		} else {
			println "Skipping binary file: " + path
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		//noinspection GroovyAccessibility
		it.options.release = targetVersion as Property<Integer>
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}
    
    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
